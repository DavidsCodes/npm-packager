// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PackageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  packages      Package[]
  apiUsage      ApiUsage[]
  
  // Connected accounts
  npmToken      String?
  githubToken   String?
  
  // 2FA
  twoFactorEnabled      Boolean @default(false)
  twoFactorSecret       String?
  twoFactorBackupCodes  String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Package {
  id          String        @id @default(cuid())
  name        String        @unique
  description String
  userId      String
  status      PackageStatus @default(DRAFT)
  framework   String
  aiModel     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Package details
  version     String        @default("0.1.0")
  repository  String?
  npmUrl      String?
  
  // Content
  code        String        @db.Text
  documentation String       @db.Text
  
  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions    PackageVersion[]
}

model PackageVersion {
  id          String   @id @default(cuid())
  packageId   String
  version     String
  code        String   @db.Text
  documentation String  @db.Text
  createdAt   DateTime @default(now())
  
  package     Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  
  @@unique([packageId, version])
}

model ApiUsage {
  id          String   @id @default(cuid())
  userId      String
  model       String
  tokens      Int
  cost        Float
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
